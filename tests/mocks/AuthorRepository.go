// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	models "github.com/joaooliveira247/go_olist_challenge/src/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AuthorRepository is an autogenerated mock type for the AuthorRepository type
type AuthorRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: author
func (_m *AuthorRepository) Create(author *models.Author) (uuid.UUID, error) {
	ret := _m.Called(author)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Author) (uuid.UUID, error)); ok {
		return rf(author)
	}
	if rf, ok := ret.Get(0).(func(*models.Author) uuid.UUID); ok {
		r0 = rf(author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Author) error); ok {
		r1 = rf(author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMany provides a mock function with given fields: authors
func (_m *AuthorRepository) CreateMany(authors *[]models.Author) ([]uuid.UUID, error) {
	ret := _m.Called(authors)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*[]models.Author) ([]uuid.UUID, error)); ok {
		return rf(authors)
	}
	if rf, ok := ret.Get(0).(func(*[]models.Author) []uuid.UUID); ok {
		r0 = rf(authors)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*[]models.Author) error); ok {
		r1 = rf(authors)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *AuthorRepository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *AuthorRepository) GetAll() ([]models.Author, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Author, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Author); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Author)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *AuthorRepository) GetByID(id uuid.UUID) (models.Author, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Author, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Author); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Author)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *AuthorRepository) GetByName(name string) ([]models.Author, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 []models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Author, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Author); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthorRepository creates a new instance of AuthorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorRepository {
	mock := &AuthorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
