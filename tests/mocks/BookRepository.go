// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	models "github.com/joaooliveira247/go_olist_challenge/src/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: book
func (_m *BookRepository) Create(book *models.Book) (uuid.UUID, error) {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Book) (uuid.UUID, error)); ok {
		return rf(book)
	}
	if rf, ok := ret.Get(0).(func(*models.Book) uuid.UUID); ok {
		r0 = rf(book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *BookRepository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *BookRepository) GetAll() ([]models.BookOut, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.BookOut
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.BookOut, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.BookOut); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BookOut)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookByID provides a mock function with given fields: id
func (_m *BookRepository) GetBookByID(id uuid.UUID) (models.BookOut, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByID")
	}

	var r0 models.BookOut
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.BookOut, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.BookOut); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.BookOut)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookByQuery provides a mock function with given fields: query
func (_m *BookRepository) GetBookByQuery(query map[string]interface{}) ([]models.BookOut, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByQuery")
	}

	var r0 []models.BookOut
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]models.BookOut, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []models.BookOut); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BookOut)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooksByAuthorID provides a mock function with given fields: authorID
func (_m *BookRepository) GetBooksByAuthorID(authorID uuid.UUID) ([]models.BookOut, error) {
	ret := _m.Called(authorID)

	if len(ret) == 0 {
		panic("no return value specified for GetBooksByAuthorID")
	}

	var r0 []models.BookOut
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.BookOut, error)); ok {
		return rf(authorID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.BookOut); ok {
		r0 = rf(authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BookOut)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, book
func (_m *BookRepository) Update(id uuid.UUID, book *models.Book) error {
	ret := _m.Called(id, book)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *models.Book) error); ok {
		r0 = rf(id, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
